import asyncio

from telebot import TeleBot
from data.db_session import *
from data.__all_models import *

token = '6748575861:AAFkjSEXI0hxtNhU-Z8orkBeS4pR4s9_kN4'
global_init('db/TF_db.sqlite')

bot = TeleBot(token)


def extract_arg(arg):
    return arg.split()[1:]


def send_notification(username: str, notification: str):
    session = create_session()
    user = session.query(User).filter(User.name == username).first()
    bot.send_message(user.tg, notification)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.from_user.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: '/register <–≤–∞—à –Ω–∏–∫> <–≤–∞—à –ø–∞—Ä–æ–ª—å>', '/unregister'")
    session = create_session()
    user = session.query(User).filter(User.tg == message.from_user.id).first()
    if user:
        bot.send_message(message.from_user.id, f'{user.name}!')
    else:
        bot.send_message(message.from_user.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')


@bot.message_handler(commands=['register'])
def register(message):
    session = create_session()
    status = extract_arg(message.text)
    try:
        if len(status) != 2:
            raise IndexError
        user = session.query(User).filter(User.name == status[0]).first()
        if not user:
            bot.send_message(message.from_user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')
            return
        if not user.check_password(status[1]):
            bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.')
            return
        user.tg = message.from_user.id
        session.commit()
        bot.delete_message(message.from_user.id, message.id)
        bot.send_message(message.from_user.id, '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.')
    except IndexError:
        bot.send_message(message.from_user.id, '–ê—Ä–≥—É–º–µ–Ω—Ç—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.')


@bot.message_handler(commands=['unregister'])
def unregister(message):
    session = create_session()
    user = session.query(User).filter(User.tg == message.from_user.id).first()
    if not user:
        bot.send_message(message.from_user.id, '–í—ã –∏ —Ç–∞–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
        return
    user.tg = None
    session.commit()
    bot.send_message(message.from_user.id, '–í—ã –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü—Ä–æ—â–∞–π—Ç–µ üò¢üò≠üò©')


@bot.message_handler(commands=['accept'])
def accept(message):
    session = create_session()
    id1, id2 = extract_arg(message.text)[0], extract_arg(message.text)[1]
    try:
        item1 = session.query(Item).get(id1)
        item2 = session.query(Item).get(id2)
        email = item1.get_owner().email
        item1.status = 1
        item2.status = 1
        session.commit()
        bot.send_message(message.from_user.id, f'–≤–æ—Ç –ø–æ—á—Ç–∞ owner, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º! {email}.')
    except Exception:
        bot.send_message(message.from_user.id, '–û–¥–∏–Ω –∏–∑ id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.')


@bot.message_handler(commands=['test'])
def te(message):
    send_notification('Romromius', 'Hello')


def run_bot():
    print('running', bot.user.first_name)
    bot.infinity_polling()

run_bot()
